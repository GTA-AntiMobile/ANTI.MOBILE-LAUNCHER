package eric.antimobile.launcher.ui;

import javax.swing.*;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class InstallLauncher extends javax.swing.JDialog {
    private JProgressBar progressBar;
    private JLabel statusLabel;
    private JButton downloadButton;

    private static final String GTA_DOWNLOAD_URL = "https://drive.usercontent.google.com/download?id=1aDf5aMwJOuUfEDz-A5MNFwiK-s5_IFe9&export=download&authuser=0&confirm=t&uuid=572cfb63-ee8e-4127-bd39-a2fc6bae5a24&at=AN8xHooacYV3FtgQDOThv7Grt_o2%3A1753725275604";

    /**
     * Creates new form InstallLauncher
     */
    public InstallLauncher(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setUndecorated(true);
        initComponents();
        init();
    }

    void init() {
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        btnClose = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        downloadButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        statusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        java.awt.GridBagConstraints gridBagConstraints;

        btnClose.setText("X");
        btnClose.addActionListener(evt -> btnCloseActionPerformed(evt));

        jLabel1.setText("Tải xuống");

        downloadButton.setText("Tải về");
        downloadButton.addActionListener(evt -> startInstallation());

        progressBar.setMinimum(0);
        progressBar.setMaximum(100);

        statusLabel.setText("Đang chờ...");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(btnClose, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(downloadButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        getContentPane().add(progressBar, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.CENTER;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 10);
        getContentPane().add(statusLabel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {
        this.setVisible(false);
    }// GEN-LAST:event_btnCloseActionPerformed

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(InstallLauncher.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        }

        java.awt.EventQueue.invokeLater(() -> {
            InstallLauncher dialog = new InstallLauncher(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    // Hàm bắt đầu quá trình cài đặt
    private void startInstallation() {
        downloadButton.setEnabled(false);

        SwingWorker<Void, Integer> worker = new SwingWorker<>() {
            private final List<String> errors = new ArrayList<>();

            @Override
            protected Void doInBackground() {
                installStep("GTA San Andreas", GTA_DOWNLOAD_URL);
                return null;
            }

            private void installStep(String name, String url) {
                try {
                    downloadAndInstall(url, "D:\\Program Files\\Rockstar Games");
                    System.out.println("\u2714 " + name + " cài đặt thành công.");
                } catch (Exception e) {
                    String message = "\u2718 " + name + " thất bại.\nLỗi: " + e.getClass().getSimpleName();
                    errors.add(message);
                    System.err.println(message + ": " + e.getMessage());
                }
            }

            @Override
            protected void done() {
                downloadButton.setEnabled(true);
                if (errors.isEmpty()) {
                    statusLabel.setText("Cài đặt hoàn tất!");
                    JOptionPane.showMessageDialog(InstallLauncher.this,
                            "Cài đặt hoàn tất thành công!",
                            "Thành công", JOptionPane.INFORMATION_MESSAGE);
                    dispose();
                } else {
                    statusLabel.setText("Cài đặt hoàn tất (một số lỗi).");
                    String errorMsg = String.join("\n\n", errors);
                    JOptionPane.showMessageDialog(InstallLauncher.this,
                            "Một số phần mềm không thể cài đặt:\n\n" + errorMsg,
                            "Lỗi khi cài đặt", JOptionPane.ERROR_MESSAGE);
                }
            }
        };

        worker.execute();
    }

    // Tải và giải nén file zip
    private void downloadAndInstall(String downloadUrl, String installPath) throws Exception {
        // // 1. Tạo thư mục cài đặt nếu chưa có
        // Files.createDirectories(Paths.get(installPath));

        // // 2. Tạo file tạm để lưu file ZIP
        // Path tempFile = Files.createTempFile("download-", ".zip");

        // // 3. Tải file ZIP
        // statusLabel.setText("Downloading GTA San Andreas ...");
        // URL url = new URL(downloadUrl);
        // URLConnection connection = url.openConnection();
        // int totalBytes = connection.getContentLength();

        // try (InputStream in = connection.getInputStream();
        // FileOutputStream out = new FileOutputStream(tempFile.toFile())) {

        // byte[] buffer = new byte[1024];
        // int bytesRead;
        // int downloadedBytes = 0;

        // while ((bytesRead = in.read(buffer)) != -1) {
        // out.write(buffer, 0, bytesRead);
        // downloadedBytes += bytesRead;

        // int progress = (int) ((downloadedBytes / (float) totalBytes) * 33); // phần
        // đầu: 0-33%
        // SwingUtilities.invokeLater(() -> progressBar.setValue(progress));
        // }
        // }

        // // 4. Giải nén ZIP
        // statusLabel.setText("Installing GTA San Andreas ...");
        // unzip(tempFile.toString(), installPath);
        // Files.delete(tempFile);

        // 5. Chạy samp0.3DL.exe → tiến trình 34% - 66%
        statusLabel.setText("Installing SAMP 0.3DL ...");
        runSilentInstallerWithProgress(installPath + "\\GTA San Andreas\\samp_setup\\sa-mp-0.3.DL-R1-install.exe",
                "/SILENT /DIR=\"" + installPath + "\\GTA San Andreas\"", 34, 66);

        // 6. Chạy sampaddon.exe → tiến trình 67% - 100%
        statusLabel.setText("Installing SAMP ADDON 2.6 ...");
        runSilentInstallerWithProgress(installPath + "\\GTA San Andreas\\samp_setup\\SAMP_Addon_2.6_Setup.exe",
                "/SILENT /DIR=\"" + installPath + "\\GTA San Andreas\"", 67, 100);

        System.out.println("✔️ Cài đặt thành công: " + downloadUrl);
    }

    // Hàm giải nén file zip vào thư mục đích
    private void unzip(String zipFile, String destDir) throws IOException {
        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFile))) {
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                Path filePath = Paths.get(destDir, entry.getName());
                if (!entry.isDirectory()) {
                    Files.createDirectories(filePath.getParent());
                    Files.copy(zis, filePath, StandardCopyOption.REPLACE_EXISTING);
                }
            }
        }
    }

    // Chạy EXE ngầm và cập nhật tiến trình (ví dụ: từ 34 đến 66%)
    private void runSilentInstallerWithProgress(String exePath, String silentArg, int startPercent, int endPercent) {
        File exeFile = new File(exePath);
        if (!exeFile.exists()) {
            System.err.println("✘ Không tìm thấy file cài đặt: " + exePath);
            return;
        }

        try {
            // Nếu có nhiều tham số, tách ra từng phần
            List<String> command = new ArrayList<>();
            command.add(exePath);

            if (silentArg != null && !silentArg.isEmpty()) {
                // Tách các argument theo khoảng trắng, trừ khi nằm trong dấu ngoặc kép
                // Giúp xử lý đúng cả /DIR="C:\Program Files\..."
                Matcher m = Pattern.compile("([^\"]\\S*|\".+?\")\\s*").matcher(silentArg);
                while (m.find()) {
                    command.add(m.group(1).replace("\"", "")); // Xóa dấu ngoặc kép nếu có
                }
            }

            ProcessBuilder pb = new ProcessBuilder(command);
            pb.redirectErrorStream(true);
            Process process = pb.start();

            // Tiến trình giả lập
            int duration = 8000; // 8 giây
            int steps = 20;
            int delay = duration / steps;

            for (int i = 1; i <= steps; i++) {
                int progress = startPercent + (endPercent - startPercent) * i / steps;
                SwingUtilities.invokeLater(() -> progressBar.setValue(progress));
                Thread.sleep(delay);
            }

            process.waitFor();

        } catch (Exception e) {
            System.err.println("✘ Lỗi khi chạy: " + exePath);
            e.printStackTrace();
        }
    }

}
